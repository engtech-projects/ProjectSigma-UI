import{e as a,i as t}from"./CustomFetch.ggXvTdIz.js";import{l as r}from"./entry.32UGFqj-.js";const o=r("procurementRequestStore",{state:()=>({allRequests:{isLoading:!1,isLoaded:!1,list:[],params:{},pagination:{}},viewRequests:{isLoading:!1,isLoaded:!1,list:[],details:{},params:{},pagination:{}},unserved:{isLoading:!1,isLoaded:!1,list:[],params:{},pagination:{},errorMessage:"",successMessage:""},canvasser:{list:[],isLoading:!1,isLoaded:!1,params:{},successMessage:"",errorMessage:""},canvasserForm:{},errorMessage:"",successMessage:"",remarks:""}),actions:{async getAllRequests(){await a("/api/procurement-request/resource",{method:"GET",params:this.allRequests.params,onRequest:()=>{this.allRequests.isLoading=!0},onResponse:({response:s})=>{this.allRequests.isLoading=!1,s.ok&&(this.allRequests.list=s._data.data,this.allRequests.pagination={first_page:s._data.links.first,pages:s._data.meta.links,last_page:s._data.links.last},this.allRequests.isLoaded=!0)}})},async getUnserved(){await a("/api/procurement-request/unserved",{method:"GET",params:this.unserved.params,onRequest:()=>{this.unserved.isLoading=!0},onResponse:({response:s})=>{if(this.unserved.isLoading=!1,s.ok)this.unserved.isLoaded=!0,this.unserved.list=s._data.data,this.unserved.pagination={first_page:s._data.links.first,pages:s._data.meta.links,last_page:s._data.links.last};else throw new Error(s._data.message)}})},async getOne(s){return await t("/api/procurement-request/resource/"+s,{method:"GET",params:this.viewRequests.params,onRequest:()=>{this.viewRequests.isLoading=!0},onResponse:({response:e})=>{if(this.viewRequests.isLoading=!1,e.ok)return this.viewRequests.details=e._data.data,this.viewRequests.isLoaded=!0,e._data.data;throw new Error(e._data.message)}})},async setCanvasser(s){await t("/api/procurement-request/set-canvasser/"+s,{method:"POST",body:this.canvasserForm,onRequest:()=>{this.canvasser.isLoading=!0},onResponse:({response:e})=>{if(this.canvasser.isLoading=!1,e.ok)this.canvasser.list=e._data.data.canvasser,this.successMessage=e._data.message;else throw this.errorMessage=e._data.message,new Error(e._data.message)}})},clearMessages(){this.errorMessage="",this.successMessage=""},reloadResources(){const s=[];let e=null;this.allRequests.isLoaded&&s.push(this.getAllRequests),this.unserved.isLoaded&&s.push(this.getUnserved),this.viewRequests.isLoaded&&(e=this.viewRequests.details.id),this.$reset(),s.forEach(i=>{i()}),e&&this.getOne(e)}}});export{o as u};
