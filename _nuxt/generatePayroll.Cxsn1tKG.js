import{b as r,c as t}from"./CustomFetch.ggXvTdIz.js";import{l}from"./entry.32UGFqj-.js";const i="weekly",p="bi-monthly",_="monthly",m=[i,p,_],d="atm",n="cash",c=[d,n],h=l("GeneratePayrolls",{state:()=>({isEdit:!1,generatePayroll:{isLoading:!1,body:{},draft:{},successMessage:"",errorMessage:""},generateParams:{adjustments:[],charging:[],deductions:[],group_type:null,project_id:null,department_id:null,payroll_type:null,release_type:null,payroll_date:"",cutoff_start:"",cutoff_end:"",advance_days:0,deduct_sss:0,deduct_philhealth:0,deduct_pagibig:0,employee_ids:[],approvals:[],payroll_details:[]},payrollDraft:{},payrollRecord:{id:null,employee_ids:[],project_id:null,department_id:null,payroll_date:"",payroll_details:[],payroll_type:null,release_type:null,cutoff_start:"",cutoff_end:"",group_type:null,deduct_sss:0,deduct_philhealth:0,deduct_pagibig:0,adjustments:[],approvals:[]},editRequest:{},allRequests:{isLoading:!1,isLoaded:!1,list:[],params:{},pagination:{}},myApprovals:{isLoading:!1,isLoaded:!1,list:[],params:{},pagination:{}},myRequests:{isLoading:!1,isLoaded:!1,list:[],params:{},pagination:{}},approval:{params:{id:null,remarks:""},errorMessage:"",successMessage:""}}),getters:{formattedPayrollDraft(a){return{...a.payrollDraft,payroll_details:a.payrollDraft.payroll_details.map(function(e){return{...e.payroll_records,employee_id:e.id,regular_hours:e.payroll_records.hours_worked.regular.reg_hrs,rest_hours:e.payroll_records.hours_worked.rest.reg_hrs,regular_holiday_hours:e.payroll_records.hours_worked.regular_holidays.reg_hrs,special_holiday_hours:e.payroll_records.hours_worked.special_holidays.reg_hrs,regular_overtime:e.payroll_records.hours_worked.regular.overtime,rest_overtime:e.payroll_records.hours_worked.rest.overtime,regular_holiday_overtime:e.payroll_records.hours_worked.regular_holidays.overtime,special_holiday_overtime:e.payroll_records.hours_worked.special_holidays.overtime,regular_pay:e.payroll_records.gross_pays.regular.regular,rest_pay:e.payroll_records.gross_pays.rest.regular,regular_holiday_pay:e.payroll_records.gross_pays.regular_holidays.regular,special_holiday_pay:e.payroll_records.gross_pays.special_holidays.regular,regular_ot_pay:e.payroll_records.gross_pays.regular.overtime,rest_ot_pay:e.payroll_records.gross_pays.rest.overtime,regular_holiday_ot_pay:e.payroll_records.gross_pays.regular_holidays.overtime,special_holiday_ot_pay:e.payroll_records.gross_pays.special_holidays.overtime,gross_pay:e.payroll_records.total_gross_pay,sss_employee_contribution:e.payroll_records.salary_deduction.sss.employee_contribution,sss_employer_contribution:e.payroll_records.salary_deduction.sss.employer_contribution,sss_employee_compensation:e.payroll_records.salary_deduction.sss.employee_compensation,sss_employer_compensation:e.payroll_records.salary_deduction.sss.employer_compensation,sss_employee_wisp:e.payroll_records.salary_deduction.sss.employee_wisp,sss_employer_wisp:e.payroll_records.salary_deduction.sss.employer_wisp,philhealth_employee_contribution:e.payroll_records.salary_deduction.phic.employee_contribution,philhealth_employer_contribution:e.payroll_records.salary_deduction.phic.employer_contribution,pagibig_employee_contribution:e.payroll_records.salary_deduction.hmdf.employee_contribution,pagibig_employer_contribution:e.payroll_records.salary_deduction.hmdf.employer_contribution,withholdingtax_contribution:e.payroll_records.salary_deduction.ewtc,total_deduct:e.payroll_records.total_salary_deduction,net_pay:e.payroll_records.total_net_pay,loans:e.payroll_records.salary_deduction.loan,cash_advance:e.payroll_records.salary_deduction.cash_advance,adjustments:e.payroll_records.adjustments.map(s=>({name:s.adjustment_name,amount:s.adjustment_amount})),deductions:[...e.payroll_records.salary_deduction.loan.loans.map(s=>({deduction_id:s.id,name:s.name,amount:s.max_payroll_payment,type:"Loan"})),...e.payroll_records.salary_deduction.cash_advance.cash_advance.map(s=>({deduction_id:s.id,name:"Cash Advance",amount:s.max_payroll_payment,type:"Cash Advance"})),...e.payroll_records.salary_deduction.other_deductions.other_deduction.map(s=>({deduction_id:s.id,name:s.otherdeduction_name,amount:s.max_payroll_payment,type:"Other Deduction"}))]}})}}},actions:{async getOne(a,e){return await r("/api/payroll/resource/"+a,{method:"GET",params:e,onResponse:({response:s})=>{if(s.ok)return s._data.data;throw new Error(s._data.message)}})},async getAllRequests(){await t("/api/payroll/resource",{method:"GET",params:this.allRequests.params,watch:!1,onRequest:()=>{this.allRequests.isLoading=!0},onResponse:({response:a})=>{this.allRequests.isLoading=!1,a.ok&&(this.allRequests.isLoaded=!0,this.allRequests.list=a._data.data,this.allRequests.pagination={first_page:a._data.links.first,pages:a._data.meta.links,last_page:a._data.links.last})}})},async getMyRequests(){await t("/api/payroll/my-requests",{method:"GET",params:this.myRequests.params,watch:!1,onRequest:()=>{this.myRequests.isLoading=!0},onResponse:({response:a})=>{if(this.myRequests.isLoading=!1,a.ok)this.myRequests.isLoaded=!0,this.myRequests.list=a._data.data,this.myRequests.pagination={first_page:a._data.links.first,pages:a._data.meta.links,last_page:a._data.links.last};else throw new Error(a._data.message)}})},async getMyApprovals(){await t("/api/payroll/my-approvals",{method:"GET",params:this.myApprovals.params,watch:!1,onRequest:()=>{this.myApprovals.isLoading=!0},onResponse:({response:a})=>{if(this.myApprovals.isLoading=!1,a.ok)this.myApprovals.isLoaded=!0,this.myApprovals.list=a._data.data,this.myApprovals.pagination={first_page:a._data.links.first,pages:a._data.meta.links,last_page:a._data.links.last};else throw new Error(a._data.message)}})},async draftPayrollRequest(){const a={...this.generateParams,employee_ids:JSON.stringify(this.generateParams.employee_ids),approvals:JSON.stringify(this.generateParams.approvals),adjustments:JSON.stringify(this.generateParams.adjustments)};return await r("/api/payroll/generate-payroll",{method:"POST",body:a,onResponse:({response:e})=>{if(e.ok)return this.payrollDraft=e._data.data,e._data.data;throw new Error(e._data.message)}})},async createPayrollRequest(){return await r("/api/payroll/create-payroll",{method:"POST",body:this.formattedPayrollDraft,onResponseError:({response:a})=>{throw new Error(a._data.message)},onResponse:({response:a})=>{if(a.ok)return this.reloadResources(),a._data;throw new Error(a._data.message)}})},async approveApprovalForm(a){return await r("/api/approvals/approve/GeneratePayroll/"+a,{method:"POST",onResponseError:({response:e})=>{throw new Error(e._data.message)},onResponse:({response:e})=>{if(e.ok)return this.reloadResources(),e._data;throw new Error(e._data.message)}})},async denyApprovalForm(a,e){const s=new FormData;s.append("id",a),s.append("remarks",e),await r("/api/approvals/disapprove/GeneratePayroll/"+a,{method:"POST",body:s,onResponseError:({response:o})=>{throw new Error(o._data.message)},onResponse:({response:o})=>{if(o.ok)return this.reloadResources(),o._data}})},reloadResources(){const a=this.generateParams,e=[];this.allRequests.isLoaded&&e.push(this.getAllRequests),this.myRequests.isLoaded&&e.push(this.getMyRequests),this.myApprovals.isLoaded&&e.push(this.getMyApprovals),this.$reset(),this.generateParams=a,e.forEach(s=>{s()})},addAdjustment(){this.generateParams.adjustments.push({employee_id:null,adjustment_name:"",adjustment_amount:""})},removeAdjustment(a){this.generateParams.adjustments.splice(a,1)}}});export{m as P,c as R,h as u};
